# auto complete & snippetn ======================================================================
[[plugins]]
on_event = 'BufRead'
repo = 'prabirshrestha/async.vim'

[[plugins]]
depends = ['async.vim']
on_event = 'BufRead'
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
depends = ['asyncomplete.vim']
on_event = 'BufRead'
repo = 'prabirshrestha/asyncomplete-file.vim'

[[plugins]]
depends = ['asyncomplete.vim', 'vim-lsp']
on_event = 'BufRead'
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
depends = ['asyncomplete.vim', 'neosnippet']
hook_source = '''
  call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
      \ 'name': 'neosnippet',
      \ 'allowlist': ['*'],
      \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
      \ }))
'''
on_event = 'BufRead'
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'

# vim-lsp  =======================================================
[[plugins]]
depends = ['async.vim']
hook_source = '''
  let g:lsp_signs_enabled = 1         " enable signs
  let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
  let g:lsp_diagnostics_float_cursor = 1
  let g:lsp_diagnostics_virtual_text_enabled = 0
  let g:lsp_diagnostics_float_delay = 400 " default 500
  let g:lsp_signs_error = {'text': '✗'}
  let g:lsp_signs_warning = {'text': '‼'}
  let g:asyncomplete_completion_delay=5
'''
on_event = 'BufRead'
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
depends = ['async.vim', 'vim-lsp']
hook_source = '''
  nmap <F12> <Plug>(lsp-definition)
  "nmap <silent> <Leader>lj <plug>(lsp-next-diagnostics)
  "nmap <silent> <Leader>lk <plug>(lsp-previous-diagnostics)
  nmap <silent> gs <plug>(lsp-document-diagnostics)
  nmap <silent> g] <plug>(lsp-next-error)
  nmap <silent> g[ <plug>(lsp-previous-error)
  nmap <silent> gd <plug>(lsp-hover)
  nmap <F2> <plug>(lsp-rename)
  nmap <F3> <plug>(lsp-document-format)
'''
on_event = 'BufRead'
repo = 'mattn/vim-lsp-settings'

# Julia =======================================================
[[plugins]]
on_ft = 'julia'
repo = 'ajpaulson/julia-syntax.vim'

# Rust =======================================================
# [[plugins]]
# repo = 'rust-lang/rust.vim'
# on_ft = 'rust'

# TOML =======================================================
[[plugins]]
on_ft = 'toml'
repo = 'cespare/vim-toml'

# Neosnippet =======================================================
[[plugins]]
depends = ['neosnippet-snippets']
hook_source = '''
  if has('mac')
    let g:neosnippet#snippets_directory="~/.config/nvim/snippets"
  endif
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=0 concealcursor=niv
  endif
'''
on_event = 'BufRead'
repo = 'Shougo/neosnippet'

[[plugins]]
on_event = 'BufRead'
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
on_event = 'BufRead'
repo = 'thomasfaingnaert/vim-lsp-snippets'

[[plugins]]
on_event = 'BufRead'
repo = 'thomasfaingnaert/vim-lsp-neosnippet'

[[plugins]]
depends = ['neosnippet']
hook_source = '''
  if has('mac')
    let g:sonictemplate_vim_template_dir = '~/.config/nvim/sonictemplate'
  endif
'''
on_event = 'BufRead'
repo = 'mattn/vim-sonictemplate'

# insert mode =======================================================
[[plugins]]
hook_source = '''
  inoremap <C-l> <C-g>U<Right>
'''
repo = 'cohama/lexima.vim'
on_event = 'BufRead'

# comment: gc
[[plugins]]
repo = 'tpope/vim-commentary'
description = 'toggle comment with gc'
on_event = 'BufRead'

[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'BufRead'

[[plugins]]
repo = 'tpope/vim-speeddating'
on_event = 'BufRead'

[[plugins]]
repo = 'tpope/vim-repeat'
on_event = 'BufRead'
